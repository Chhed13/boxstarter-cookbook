$module_dir = Get-ChildItem -Path $env:SystemDrive\Users\*\Appdata\Roaming\Boxstarter -filter Boxstarter.Chocolatey -Recurse -Directory
Import-Module "$($module_dir.FullName)\Boxstarter.Chocolatey.psd1"
$identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$plain_password = '<%= @password %>'
$disable_reboots = $<%= @disable_reboots %>
$chef_client_enabled = $<%= @chef_client_enabled %>
$isRemote = $<%= @is_remote %>

if($plain_password.length -gt 0) {
	$password = ConvertTo-SecureString $plain_password -asplaintext -force
	$creds = New-Object System.Management.Automation.PSCredential ($identity.Name, $password)
}

$params = @{
	PackageName = "<%= @temp_dir %>/package.ps1"
}

#if we use the chef_client cookbook and dont want to start 
#boxstarter on its own after reboot, then do not send 
#credentials to the boxstarter installer command
if($creds -and !($chef_client_enabled)){$params['credential'] = $creds}

if($disable_reboots){$params['DisableReboots'] = $true}

#If we are running via winrm perhaps via test-kitchen or chef-metal
#we will need to create a scheduled task for operations that do
#not work remotely
if($isRemote -and $creds){
	Import-Module "$($module_dir.FullName)\..\Boxstarter.Common\Boxstarter.Common.psd1"
	Create-BoxstarterTask $creds
}

$result = Install-BoxstarterPackage @params -verbose

if($result.errors.count -gt 0) {
  Write-Output "ERROR SUMMARY:"
  $i=0
  $result.errors | % {
    $i=$i + 1
    Write-Output "#$($i))"
    $_ | fl * -force
  }
  $host.SetShouldExit($result.errors.count)
}